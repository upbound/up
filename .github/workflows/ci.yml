name: CI

on:
  push:
    branches:
      - main
      - release-*
  pull_request: {}
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.22'
  GOLANGCI_VERSION: 'v1.56.2'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

  # Common users. We can't run a step 'if secrets.AWS_USR != ""' but we can run
  # a step 'if env.AWS_USR' != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  DOCKER_USR: ${{ secrets.DOCKER_USR }}
  AWS_USR: ${{ secrets.AWS_USR }}

  # NOTE(epk) this identifier is used to easily bust a pre-existing go
  # mod/build cache. To do so simply increment this number.
  GO_CACHE_BUSTER: 0

jobs:
  detect-noop:
    runs-on: ubuntu-20.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v2.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'
          concurrent_skipping: false


  lint:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      # TODO(hasheddan): temporary to allow access to up-sdk-go
      - name: Granting private modules access
        run: |
          git config --global url."https://${{ secrets.UPBOUND_BOT_GITHUB_TOKEN }}:x-oauth-basic@github.com/upbound".insteadOf "https://github.com/upbound"

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(make go.cachedir)"
          echo "::set-output name=go-mod::$(make go.mod.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-build-lint-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      # We could run 'make lint' to ensure our desired Go version, but we prefer
      # this action because it leaves 'annotations' (i.e. it comments on PRs to
      # point out linter violations).
      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          skip-go-installation: true

  check-diff:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      # TODO(hasheddan): temporary to allow access to up-sdk-go
      - name: Granting private modules access
        run: |
          git config --global url."https://${{ secrets.UPBOUND_BOT_GITHUB_TOKEN }}:x-oauth-basic@github.com/upbound".insteadOf "https://github.com/upbound"

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(make go.cachedir)"
          echo "::set-output name=go-mod::$(make go.mod.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-build-check-diff-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Check Diff
        run: make check-diff

  unit-tests:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      # TODO(hasheddan): temporary to allow access to up-sdk-go
      - name: Granting private modules access
        run: |
          git config --global url."https://${{ secrets.UPBOUND_BOT_GITHUB_TOKEN }}:x-oauth-basic@github.com/upbound".insteadOf "https://github.com/upbound"

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(make go.cachedir)"
          echo "::set-output name=go-mod::$(make go.mod.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-build-unit-tests-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run Unit Tests
        run: make -j2 test

      - name: Publish Unit Test Coverage
        uses: codecov/codecov-action@v4
        with:
          flags: unittests
          file: _output/tests/linux_amd64/coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e-tests:
    runs-on: ubuntu-20.04
    #runs-on:
    #  group: managed-control-planes-testing
    needs:
    - detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Fetch History
      run: git fetch --prune --unshallow

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Docker
      run: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
    - name: Install Make
      run: sudo apt-get install -y make
    - name: Install kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Login to DockerHub
      uses: docker/login-action@v2
      if: env.GAR_USR != ''
      with:
        registry: us-west1-docker.pkg.dev
        username: ${{ secrets.DOCKER_USR }}
        password: ${{ secrets.DOCKER_PSW }}

    - name: Start cluster
      run: kind create cluster --config=.github/kind.yaml --wait 5m
    - name: Select context
      run: kubectl cluster-info --context kind-kind
    - name: space init
      run: >
        go run ./cmd/up space init v1.0.0
          --set "ingress.host=proxy.upbound-127.0.0.1.nip.io"
          --set "clusterType=kind"
          --yes
      env:
        UPBOUND_REGISTRY_USERNAME: ${{ secrets.DOCKER_USR }}
        UPBOUND_REGISTRY_PASSWORD: ${{ secrets.DOCKER_PSW }}

    # - name: Run E2E Tests
    #  run: make e2e

  publish-artifacts:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(make go.cachedir)"
          echo "::set-output name=go-mod::$(make go.mod.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"
          RELEASE_TARGET: "release"

      - name: Publish Artifacts to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: _output/**

      - name: Login to Docker
        uses: docker/login-action@v1
        if: env.DOCKER_USR != ''
        with:
          username: ${{ secrets.DOCKER_USR }}
          password: ${{ secrets.DOCKER_PSW }}

      - name: Publish Artifacts to S3 and Docker Hub
        run: make -j2 publish BRANCH_NAME=${GITHUB_REF##*/}
        if: env.AWS_USR != '' && env.DOCKER_USR != ''
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_USR }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PSW }}
          AWS_DEFAULT_REGION: us-east-1
          GIT_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote Artifacts in S3 and Docker Hub
        if: github.ref == 'refs/heads/main' && env.AWS_USR != '' && env.DOCKER_USR != ''
        run: make -j2 promote
        env:
          BRANCH_NAME: main
          CHANNEL: main
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_USR }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PSW }}
          AWS_DEFAULT_REGION: us-east-1
